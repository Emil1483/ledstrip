name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: superemil64/ledstrip-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-client:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: client
          platforms: linux/amd64
          push: true
          tags: superemil64/ledstrip-client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs:
      - build-api
      - build-client
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Test Core
        run: |
          python -m unittest tests.test_core
        env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          TEST_USER_EMAIL: emil@djupvik.dev
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          CLERK_PEM_PUBLIC_KEY: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61/yoXgzCgrZJSqQoFzm\nVgJRIpcgqFUazmJIZprdLst1DEdySB8CQ3Gmppxk3+shg426yfw76UcGGF22tkHk\nJrDawJ/qU8PPrIEmbCiznTDRsOVqaLSW11um7kMQQ7MRGaNKGJqPmWyukpBdDuOd\nXeNJsyciPK1T/GwlLM6NBn6cLrNoXeR7oVaZbuBIcVo945ywbmbFGGtzhpnM690s\nProHa0w0H8MoLSgw7STO2QCRgmmT3c5dr25shlRRmi+HIifONLaTBxyPJ27vw01e\n6MTJ9wjYMiFB3RPAZXFlwJ1bscElMtzd67u6qBD/+9PIOp43m/qIN4dLOaUxo6WJ\n7wIDAQAB\n-----END PUBLIC KEY-----"

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-api
      - build-client
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create ansible configuration directory
        run: sudo mkdir -p /etc/ansible

      - name: Create Ansible configuration file
        run: sudo echo -e "[defaults]\nhost_key_checking = False" | sudo tee /etc/ansible/ansible.cfg

      - name: Setting ansible vault password
        run: echo '${{ secrets.ANSIBLE_VAULT_PASS }}' | sudo tee /etc/ansible_pass_private
        shell: bash

      - name: Pip install docker
        run: sudo pip install docker

      - name: Install Ansible
        run: sudo apt-get install ansible

      - name: Run ansible script
        shell: bash
        run: |
          cd ansible/playbooks
          sudo ansible-playbook -i ../inventory.yml --vault-id default@/etc/ansible_pass_private deploy.yml --diff
